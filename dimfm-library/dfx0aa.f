      SUBROUTINE DFX0AA(N)
C    DIMFILM-GKS INTERFACE ROUTINE - INTERNAL ACCESS ONLY
C    SELECT AND EFFECT TRANSFORMATION N
      INCLUDE 'params.cmn'
      INCLUDE 'dfxcac.cmn'
      INCLUDE 'dfxcacs.cmn'
      INCLUDE 'dfxcba.cmn'
      INCLUDE 'dfxcbb.cmn'
      INCLUDE 'dfxcbc.cmn'
      INCLUDE 'dfxcbcs.cmn'
      INCLUDE 'dfxc00.cmn'
      INCLUDE 'dfxc00s.cmn'
      INCLUDE 'dfxc01.cmn'
      INCLUDE 'dfxc01s.cmn'
      INCLUDE 'dfxc05.cmn'
      INCLUDE 'dfxc12.cmn'
      INCLUDE 'dfxc13.cmn'
      INCLUDE 'dfxc13s.cmn'
      INCLUDE 'dfxc24.cmn'
      INTEGER DFX3AA
      SAVE IENT
      DATA IENT/-1/
      IENT = 0
      IF (N.EQ.NOTR) GO TO 1
      NOTR = N
C    NEW TRANSFORMATION - SO RECOMPUTE NOTRP
      NOTRP = DFX3AA(N)
C    NEGATIVE RETURN FOR ERROR NOT POSSIBLE AS DFX0AA IS INTERNAL CALL
C    NOW DO TRANSFORM
      ENTRY DFX1AA
C    DIMFILM-GKS INTERFACE ROUTINE - INTERNAL ACCESS ONLY
C    RESET CURRENT TRANSFORMATION AND RESET PRECLIP/BLANK
      IF (IENT.LT.0) IENT = 1
    1 XSOLD = XSWCND
      YSOLD = YSWCND
      XSWCND = (NDCVP(2,NOTRP) - NDCVP(1,NOTRP))/
     1              (WCWIN(2,NOTRP) - WCWIN(1,NOTRP))
      YSWCND = (NDCVP(4,NOTRP) - NDCVP(3,NOTRP))/
     1              (WCWIN(4,NOTRP) - WCWIN(3,NOTRP))
      XOWCND = NDCVP(1,NOTRP) - WCWIN(1,NOTRP)*XSWCND
      YOWCND = NDCVP(3,NOTRP) - WCWIN(3,NOTRP)*YSWCND
C    RESCALE TEXT/MARKER HEIGHTS IF REQUIRED
      IF (TRHT) THEN
                     HT = HT*YSOLD/YSWCND
                     HTMK = HTMK*YSOLD/YSWCND
      ENDIF
C    RESCALE BROKEN LINE SCALE AS REQUIRED
      IF (ITRDSH.EQ.1) X = .01*(WCWIN(2,NOTRP)-WCWIN(1,NOTRP))
      IF (ITRDSH.EQ.2) X = XQ*XSOLD/XSWCND
      IF (ITRDSH.NE.0) CALL DFX135(X)
C    RECALCULATE WC DOT SIZE
      DXWCPT = DXNDPT/YSWCND
      ENTRY DFX2AA
C    DIMFILM-GKS INTERFACE ROUTINE - INTERNAL ACCESS ONLY
C    RESET CURRENT PRECLIP/BLANK
C
C    SET BOUND VALUES
      IF (IENT.LT.0) IENT = 2
      IF (NOTR.EQ.1) THEN
                         XB1 = WCBND1(1)
                         XB2 = WCBND1(2)
                         YB1 = WCBND1(3)
                         YB2 = WCBND1(4)
                     ELSE
                         XB1 = WCWIN(1,NOTRP)
                         XB2 = WCWIN(2,NOTRP)
                         YB1 = WCWIN(3,NOTRP)
                         YB2 = WCWIN(4,NOTRP)
      ENDIF
C
C     SET CURRENT PRECLIP WINDOW (IF NOT PRECLIP THIS WILL
C     BE BOUNDS)
      XTB1 = PCLPWC(1,NOTR)
      XTB2 = PCLPWC(2,NOTR)
      YTB1 = PCLPWC(3,NOTR)
      YTB2 = PCLPWC(4,NOTR)
      PWIND = PRECLP(NOTR)
      IF (.NOT.PWIND) THEN
                          PWIND = PREBND(NOTR)
                      ELSE IF (PREBND(NOTR)) THEN
C    IF PREBND TRUE THEN MUST ALSO CLIP AT BOUNDS
                    X1 = AMAX1(XTB1,XB1)
                    X2 = AMIN1(XTB2,XB2)
                    Y1 = AMAX1(YTB1,YB1)
                    Y2 = AMIN1(YTB2,YB2)
                    IF ((X2.LE.X1).OR.(Y2.LE.Y1)) CALL DFX001(ROUTIN,3)
                    XTB1 = X1
                    XTB2 = X2
                    YTB1 = Y1
                    YTB2 = Y2
            ENDIF
C    SET CURRENT PRE-BLANKING
      BLNK = PREBLK(NOTR)
C    SET PRE-BLANKING ACTION
      BLNKS = BLNK
      IF (BLNK) THEN
      XBB1 = PBLKWC(1,NOTR)
      XBB2 = PBLKWC(2,NOTR)
      YBB1 = PBLKWC(3,NOTR)
      YBB2 = PBLKWC(4,NOTR)
           IF (PWIND) THEN
                       XBB1 = AMAX1(XBB1,XTB1)
                       XBB2 = AMIN1(XBB2,XTB2)
                       YBB1 = AMAX1(YBB1,YTB1)
                       YBB2 = AMIN1(YBB2,YTB2)
                 IF ((XBB2.LE.XBB1).OR.(YBB2.LE.YBB1)) BLNKS = .FALSE.
           ENDIF
      ENDIF
C
C
      ENTRY DFX4AA
C    DIMFILM-GKS INTERFACE ROUTINE - INTERNAL ACCESS ONLY
C    SET APPROPRIATE DIMFILM TRANSFORMATION
      IF (IENT.LT.0) IENT = 4
      WCTR = WCTRN(NOTR)
      IF (.NOT.WCTR) GO TO 4
C    CHECK IF TRANSFORMATION TURNED ON
      X0T = XNORG(NOTR) + XTORG(NOTR)
      Y0T = YNORG(NOTR) + YTORG(NOTR)
      ALPHA = AXANG(NOTR)
      CALPHA = COS(ALPHA)
      SALPHA = SIN(ALPHA)
    4 ANGL = ANGLS
      IF (.NOT.HS) ANGL = ANGL + ALPHA
      CANGL = COS(ANGL)
      SANGL = SIN(ANGL)
C    NOW GET EFFECTIVE WCTR
      IF ((X0T.EQ.0.0).AND.(Y0T.EQ.0.0).AND.(ALPHA.EQ.0.0)) WCTR=.FALSE.
C    IF COORDINATE CHANGE (I.E. NOT CLIPPING/BLANKING ALONE) THEN
C    RESET CELLMAPPED AREA POINTER
      IF ((IENT.EQ.2).OR.(IENT.EQ.4)) RASTLN = 0
C
C    DFX4AA IS CALLED FROM NEW ORIGIN/ROTATIONS, BUT MAY ALSO
C    OCCUR DUE TO TRANSFORM CHANGE IN FUTURE RELEASES.
C    IT IS SENSIBLE, THEREFORE, TO RESET RASTERS AFTER ANY DFX4AA
C    TRANSFORMATION REFERENCE.
C    SUCH REFERENCES MAY ALSO BE VIA DFX137 FROM GRAPHING/CONTOURS.
C
C    NOTE - THE TRANSFORMATION MAY NOT BE CHANGED (E.G. ARGUMENTS
C        DO NOT REQUIRE THIS) IN NEW ORIGIN (ETC) REFERENCE, IN WHICH
C        CASE DFX4AA WOULD NOT BE CALLED.  THE USER SHOULD AVOID
C        INTERRUPTING RASTER SCAN LINES WITH CALLS THAT MIGHT CHANGE
C        THE TRANSFORMATION
C
C   BUT ALWAYS RESET RASTER WINDOW FLAG
C
      RASTWN = .TRUE.
C
      RETURN
      END
