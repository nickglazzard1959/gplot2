      SUBROUTINE DFX309(I1,ITYPE,S1,S2,ZS,DIFF,A,B,ZL,ZR)
C --- NG: THIS OUTPUTS A SET OF VALUE STRINGS FOR AN AXIS.
      INCLUDE 'dfxc01.cmn'
      INCLUDE 'dfxc01s.cmn'
      INCLUDE 'dfxc06.cmn'
      INCLUDE 'dfxc02.cmn'
      INCLUDE 'dfxc02s.cmn'
      INCLUDE 'dfxc00.cmn'
      INCLUDE 'dfxc00s.cmn'
      INCLUDE 'dfxc05.cmn'
      INCLUDE 'dfxc12.cmn'
      LOGICAL FACT, LEFT,SMONSP
      REAL DL10
      INCLUDE 'dfxc10.cmn'
      INCLUDE 'dfxc10s.cmn'
      INTEGER DFX020
      SAVE DL10
      DATA DL10/1.0/
      CS1(I) = (FLOAT(I)-1.0)*(C1MONO+C1SEP) + C1MONO
C    STATEMENT FUNCTION CS1 GIVES LENGTH OF MONO STRING OF
C    I CHARACTERS AT UNIT HEIGHT
      SMONSP = MONSP
C    FORCE MONO FOR VALUES
      MONSP = .TRUE.
      XD = XTB2 - XTB1
      YD = YTB2 - YTB1
      IQ = 1
      LEFT = .TRUE.
      I = I1 - 20
      IF (I.LT.10) GO TO 3
      I = I - 10
      LEFT = .FALSE.
    3 IF (ITYPE.GT.0) GO TO 4
      IF (ITYPE.EQ.-2) GO TO 60
      IF (IZVAL.AND.DIFF.GT..5*ABS(ZR-ZL)) GO TO 73
C    ENSURE ONLY BEGIN/END VALUES FOR RANGES S.T. INTERVALS NOT
C    SUFFICIENLTY LARGE TO BE SIGNIFICANT TO 2 DEC. PLACES.
      IF ((.NOT.IZVAL).AND.(ABS(ZR-ZL).LT..01*ABS(ZL))) GO TO 1
      B1 = AMAX1(ABS(ZR),ABS(ZL))
      A1 = AMIN1(ABS(ZR),ABS(ZL))
      A1 = AMAX1(DIFF,A1)
C    THIS IS NECESSARY AS (REF. DFX320) THE LEAST VALUE PLOTTED
C    WILL NOT BE LESS THAN DIFF (AS THE MINIMUM POINT IS A MULTIPLE
C    OF THIS TO FORCE ZERO TO BE VALUED (WHEN RELEVANT).
      B1 = DFX302(ALOG10(B1))
      A1 = DFX302(ALOG10(A1))
C    THIS FIXES VALUING TAKING ACCOUNT OF DIFFERENCE (WHICH IS NEVER
C    LESS THAN .01 OF RANGE NOR GREATER OR EQUAL TO .5*RANGE)
      C1 = ABS(B1-A1)
      A1 = AMIN1(A1,B1)
      IF (IZVAL) GO TO 82
      IF (C1.GT.2.) GO TO 80
      IF (A.LE.-100.0.OR.B.GE.1000.0) GO TO 80
      IF (DIFF.LT.(.01*(1.-TD01))) GO TO 80
C    DIFFERENCE EXCEEDING .01 WILL BE SIGNIFICANT FOR RANGES WITHIN
C    (-100.0,1000.0)  (DUE TO FORCED RELATION BETWEEN DIFF AND RANGE).
      A1 = 0.0
      GO TO 81
   82 IF (MIN1(ZL,ZR).LE.-100000.OR.MAX1(ZL,ZR).GE.1000000) GO TO 80
C    WITH INTEGER VALUES A FORMAT (I6) IS USED (WHEN FACT = .TRUE.).
C    THIS CORRESPONDS TO 6 DIGITS (INCLUDING SIGN IF NEGATIVE)
C    I.E. (-100000,1000000)
      A1 = 0.0
      C1 = 0.0
C    C1 SET TO ZERO ENSURES FACT IS SET .TRUE.
      GO TO 81
   80 IF (C1.GE.2.) A1 = A1 + 1.0
      IF (C1.NE.0.) GO TO 81
      VJ = DFX302(ALOG10(ABS(DIFF)))
      IF (ABS(A1-VJ).GT.2.) A1 = A1 - 1.
C    IF VALUES ALL OF FORM N.YZ (WITH COMMON FACTOR) I.E. C1 = 0,
C    AND DIFF IS NOT SIGNIFICANT TO SAME FACTOR (E.G. IT IS .00D)
C    THEN FACTOR IS ADJUSTED TO PLOT VALUES AS NY.Z (WHEN DIFFERENCE
C    BECOMES .0D)
   81 FACTOR = 10.**A1
C    COMMON FACTORS ARE SUPPRESSED WITH DIFFERENCES .GE. .01 FOR RANGES
C    IN THE RANGE (-100.0,1000.0); ESPECIALLY FOR AXIS RANGE (0.,100.)
C    INCLUSIVE I.E. PERCENTAGES
      FACT1 = 1./FACTOR
      FACT = .TRUE.
      IF (C1.GE.3.) FACT = .FALSE.
      GO TO 61
C --- NG: NOTE: THIS IS WHERE IQ GET SET NEGATIVE.
   60 IQ = -1
C    ENSURE ONLY BEGIN/END VALUES FOR RANGES S.T. INTERVALS NOT
C    SUFFICIENTLY LARGE TO BE SIGNIFICANT TO 2 DEC. PLACES.
      IF (ABS(B-A).LT..01*ABS(A)) GO TO 1
      FACT1 = 1.
      FACT = .FALSE.
      FACTOR = 1.0
   61 DIFF01 = TD01*ABS(B-A)
C=======================================================================
C    IT IS POSSIBLE TO IMPROVE NUMERIC ANNOTATION HEIGHT
C
C    AT A LATER STAGE THIS WHOLE AREA NEEDS RECONSIDERATION AND
C    RATIONALISING
C    FOR THE MOMENT IT IS REASONABLE TO ATTEMPT TO IMPROVE THE PRESENT
C    SITUATION WHICH ASSUMES A SPACE OF 6 OR 4+4 DIGITS (THE LATTER
C    IF INDEPENDENTLY FACTORED).  DC7 GOVERNS INTER-VALUE SPACING.
C
C    DFX308 OUTPUTS AS F6.2 OR I6 IF FACT IS TRUE, WHEN RECIPROCAL
C    OF COMMON FACTOR IS INCORPORATED INTO VALUES - COMMON FACTOR
C    OUTPUT VIA DFX307 FROM THIS ROUTINE.
C    WHEN NO COMMON FACTOR (FACT FALSE) FORMAT IS F4.1 OR I4 AND
C    INDIVIDUAL FACTORS (OF FORM X10**123) ARE APPENDED TO EACH VALUE
C    OUTPUT BY DFX308.
C    THIS SECTION OF CODE IS NEW, OTHERWISE ONLY SUBSEQUENT
C    REFERENCES TO CSNUM2 SHOULD BE RESTORED TO CSNUM
      IF (IZVAL) THEN
C    FOR INTEGERS SET SIZE ACCORDING TO LARGEST SIZE
C      (OUTPUT AS I6 - UNFACTORED)
            ICNUM = MAX(DFX020(A*FACT1),DFX020(B*FACT1))
      ELSE
C    FOR REALS ALLOW FOR 2 DECIMAL PLACES IF FACTORED, ELSE 1
            IF (FACT) THEN
                      DECS = 100.
            ELSE
                      DECS = 10.
            ENDIF
            AZ = ANINT(A*FACT1*DECS)
            BZ = ANINT(B*FACT1*DECS)
C    AND ALLOW FOR DECIMAL POINT
            ICNUM = MAX(DFX020(AZ),DFX020(BZ)) + 1
      ENDIF
      CSNUM2 = CS1(ICNUM)
C    CSNUM2 IS STRING LENGTH FOR CALCULATING HEIGHT
C    INTER-VALUE SPACING WHEN ALONG X-AXIS CONTROLLED BY DC7
C    CSNUM IS STRING LENGTH FOR POSITIONING (ACCORDING TO FORMAT)
C    FOR Y-VALUES, BUT TO CENTRE X-VALUES A COMBINATION OF
C    CSNUM AND CSNUM2 IS REQUIRED.
C    IF FACT IS TRUE ALLOW FOR 6 DIGITS IN FORMAT,
C    ELSE ALLOW FOR 4+4 = 8.
C=======================================================================
      ICNUM = 6
      IF (.NOT.FACT) ICNUM = 8
      CSNUM = CS1(ICNUM)
      IF (ABS(S1).LE.DIFF01) S1 = 0.0
C    SET NUMBER OF CHARACTERS
      IQQ = IQ
C    SIGNIFICANCE OF IQQ DESCRIBED IN DFX308
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C    DUE TO INTRODUCTION OF CSNUM2 MUST SUPPRESS OUT OF BOUNDS
C    DIAGNOSTICS/COUNT DURING VALUE PLOTTING IN DFX308.
C    (CSNUM2 CALCULATIONS ONLY USED PRIOR TO DFX308)
C    CSNUM2 FUNCTIONS BY FORCING LARGER CHARACTER HEIGHT TO
C    ALLOW FOR LEADING BLANKS IN VALUE WHEN FORMATTED.
C    CSNUM HAS CORRECT LENGTH FOR FORMAT BUT DUE TO LEADING
C    BLANKS MAY START STRING OUTSIDE BOUNDS = THE FIRST
C    CHARACTER SHOULD APPEAR CORRECTLY POSITIONED WITHIN THE
C    ALLOCATED SPACE FOR THE VALUE, BUT THE BLANKS MAY FORCE
C    THE OUT OF BOUNDS COUNT TO BE INCREMENTED PLUS POSSIBLE
C    DIAGNOSTIC FROM SYMTXT/RNUM/INUM INTERNAL ROUTINES.
C
C    THE OUT OF BOUNDS COUNT AND CHECK LEVEL WILL BE
C    RESTORED ON EXIT.
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      ICSAVE = ICHECK
      IBSAVE = IOBCNT
      ICHECK = -2
      GO TO (11,12),I
C    HERE FOR ALONG X-AXIS
   11 IF (IQ.EQ.1.AND.IZVAL) IQQ = 11
      SSH = AMIN1(DC6*YD,DC7*ABS(S2*DIFF)/CSNUM2)
      Y = YTB1 + DC8*YD - SSH
      IF (.NOT.LEFT) Y = YTB2 - DC8*YD
C    CENTRE VALUE ABOUT NON-BLANK VALUES (CSNUM/CSNUM2 ARE
C    OVERALL VALUES - WOULD BE BETTER TO ADJUST EACH
C    INDIVIDUAL VALUE - BUT THIS IS GOOD COMPROMISE)
C    THIS IS RELEVANT ONLY FOR REALS - DFX308 CENTRES
C    INTEGERS CORRECTLY
C    (EVENTUALLY SHOULD CHECK STRING IN DFX308 AND CENTRE OR
C     LEFT/RIGHT ADJUST AS RELEVANT AND LOSE ANY OUT OF BOUND SPACES)
      IF (IZVAL) THEN
            CS = .5*CSNUM*SSH
      ELSE
            CS = (CSNUM-.5*CSNUM2)*SSH
      ENDIF
C
C --- NG: THE CODE BEGINNING WITH LABEL 21 IS USED FOR <2 CYCLE LOG
C ---     BUT ALSO FOR OTHER THINGS. TRY TO FIX 2 CYCLE PROBLEM
C ---     HERE AND REQUIRED DATA IS AVAILABLE (NOT IN DFX308).
C      PRINT *,'21 X=',X,S1,A,S2,ZS,CS
C      PRINT *,'21 X=',X,'  IQQ=',IQQ,' XD=',XD
C --- NG: IQQ IS NEGATIVE HERE (I THINK) IF < 2 CYCLES CASE APPLIES.
C ---     NOTE THAT FOR THIS CASE (ONLY) THE POSITION OF THE X AXIS
C ---     VALUES WAS WRONG ... TOO FAR TO THE LEFT BY ABOUT THE MARGIN.
C ---     THIS SEEMS TO HAVE BEEN FIXED BY ADDING DC8 * XD TO 21 X =
C ---     ABOVE. THIS IS GUESSWORK, THOUGH. BUT OVER 40 YEARS AFTER
C ---     THIS CODE WAS WRITTEN, THAT MAY BE THE BEST THAT CAN BE DONE.
C ---     THE 0.7 IS JUST A FUDGE FACTOR, I'M AFRAID. NOTHING REALLY
C ---     SEEMS TO WORK (I'VE TRIED "SH" THINGS TOO).
C
 21   CONTINUE
      IF( IQQ .LT. 0 )THEN
         X = (S1 - A)*S2 + ZS - CS + DC8*XD * 0.7
      ELSE
         X = (S1 - A)*S2 + ZS - CS
      ENDIF
      CALL DFX308(FACT,FACT1,SSH,S1,X,Y,IQQ)
      S1 = S1 + DIFF
      IF (ABS(S1).LE.DIFF01) S1 = 0.0
      IF (S1.LE.B+DIFF01) GO TO 21
      GO TO 10
C ---
   12 IF (IQ.EQ.1.AND.IZVAL) IQQ = 12
      IF (IQQ.EQ.12.AND..NOT.LEFT) IQQ = 13
      SH = AMIN1(DC9*XD/CSNUM2,DC6*YD,DC7*ABS(S2*DIFF))
      X = XTB1 + DC8*XD - CSNUM*SH
      IF (.NOT.LEFT) THEN
            X = XTB2 - DC8*XD
            IF (.NOT.IZVAL) X = X - (CSNUM-CSNUM2)*SH
      ENDIF
C      PRINT *,'12 X=',X
      CS = .5*SH
   22 Y = (S1 - A)*S2 + ZS - CS
      CALL DFX308(FACT,FACT1,SH,S1,X,Y,IQQ)
      S1 = S1 + DIFF
      IF (ABS(S1).LE.DIFF01) S1 = 0.0
      IF (S1.LE.B+DIFF01) GO TO 22
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C    AND RESTORE CHECK LEVEL/BOUNDS COUNT BEFORE PROCEEDING
C
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   10 IOBCNT = IBSAVE
      ICHECK = ICSAVE
      IF (.NOT.FACT) GO TO 99
      IF (ABS(A1).LT.1.E-10) GO TO 99
C    COMMON FACTOR NOT PLOTTED IF 10.**0  (= 1)
C    HERE FOR COMMON FACTOR
      CSNUM = .5*C1MONO + DFX211(2,RDUMMY,INT(A1),'(''10*+'',I3)')
C    CSNUM IS LENGTH AT UNIT HEIGHT OF TIMES 10 TO (3 DIGITS)
      GO TO (31,32),I
   31 X = XTB1 + DC1*XD
      SH = AMIN1(DC10*YD,(DC1+DC2-DC11)*XD/CSNUM)
      Y = YTB1 + DC13*YD
      IF (.NOT.LEFT) Y = YTB2 - (DC13+DC10)*YD
      CALL DFX307(A1,X,Y,1,SH)
      GO TO 99
   32 Y = YTB1 + DC11*YD
      X = XTB1 + (DC3+DC10)*XD
      IF (.NOT.LEFT) X = XTB2 - DC3*XD
      SH = AMIN1(DC10*XD,(DC1+DC2-DC11)*YD/CSNUM)
      ANGL = 90.0
      CANGL = 0.0
      SANGL = 1.0
      CALL DFX307(A1,X,Y,2,SH)
      GO TO 99
    4 J = ITYPE
      DIFF01 = TD01*ABS(B-A)
      CSNUM = DFX211(2,RDUMMY,999,'(''10*+'',I3)')
C    CSNUM IS LENGTH AT UNIT HEIGHT OF 10 TO (3 DIGITS)
      GO TO (41,42),I
   41 SSH = AMIN1(DC6*YD,DC7*ABS(S2*DL10)/CSNUM)
      Y = YTB1 + DC8*YD - SSH
      IF (.NOT.LEFT) Y = YTB2 - DC8*YD
      CS = .5*CSNUM*SSH
      IF (J.EQ.1) GO TO 52
   53 S1 = S1 + DL(J)
      IF (S1.GT.B+DIFF01) GO TO 99
      J = J + 1
      IF (J.NE.10) GO TO 53
   52 X = (S1 - A)*S2 + ZS - CS
      CALL DFX110(X,Y)
      F = DFX302(S1)
      CALL DFX307(F,X,Y,3,SSH)
      S1 = S1 + DL10
      IF (S1.GT.B) GO TO 99
      GO TO 52
   42 SH = AMIN1(DC6*YD,DC7*ABS(S2*DL10))
      X = XTB1 + DC8*XD - CSNUM*SH
      IF (.NOT.LEFT) X = XTB2 - DC8*XD
      CS = .5*SH
      IF (J.EQ.1) GO TO 55
   56 S1 = S1 + DL(J)
      IF (S1.GT.B+DIFF01) GO TO 99
      J = J + 1
      IF (J.NE.10) GO TO 56
   55 Y = (S1 - A)*S2 + ZS - CS
      CALL DFX110(X,Y)
      F = DFX302(S1)
      CALL DFX307(F,X,Y,3,SH)
C    WITH FOURTH ARGUMENT 4 IT IS NECESSARY TO SET ANGL TO 90 DEGREES
C    TO OBTAIN ROTATED LOGARITHMIC VALUES
      S1 = S1 + DL10
      IF (S1.GT.B) GO TO 99
      GO TO 55
   73 IF (ICHECK.GT.0) WRITE(ERRREC,74)ZL,ZR
   74 FORMAT(1H0, 48H**DIMFILM WARNING**  INTEGRAL VALUES FOR RANGE (,
     1  1PE16.8,  1H,,1PE16.8, 16H) IS NONSENSICAL/1H ,21X, 31HEXTREMITI
     2ES ONLY WILL BE VALUED)
      CALL DFX130(0)
    1 CSNUM = CS1(14)
C*******************************************************************
C    TEMPORARY APPROXIMATION OF EXTREMITY LENGTH AS 14 CHARACTERS
C*******************************************************************
      GO TO (71,72),I
   71 SH = AMIN1(DC6*YD,DC14*XD/CSNUM)
      X1 = XTB1 + DC2*XD
      X2 = XTB2 - DC2*XD
      Y = YTB1 + DC8*YD - SH
      IF (.NOT.LEFT) Y = YTB2 - DC8*YD
      Y1 = Y
      Y2 = Y
      IARR = 2
      IF (LEFT) IARR = 1
      CALL DFX306(ZL,X1,Y1,ZR,X2,Y2,SH,IARR,I)
      GO TO 99
   72 SH = AMIN1(DC6*XD,DC14*YD/CSNUM)
      Y1 = YTB1 + DC2*YD
      Y2 = YTB2 - DC2*YD
      X = XTB1 + DC8*XD - SH
      IF (.NOT.LEFT) X = XTB2 - DC8*XD
      X1 = X
      X2 = X
      IARR = 2
      IF (LEFT) IARR = 1
      ANGL = 90.0
      CANGL = 0.0
      SANGL = 1.0
      CALL DFX306(ZL,X1,Y1,ZR,X2,Y2,SH,IARR,I)
   99 MONSP = SMONSP
      RETURN
      END
