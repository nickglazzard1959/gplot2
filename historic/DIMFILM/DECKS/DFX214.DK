*DECK DFX214 F
      SUBROUTINE DFX214(ISYM)
C
C    **INTERNAL SYMTXT FUNCTION**
C
      CHARACTER*(*) ISYM
*CALL,DFXCBD
*CALL,DFXC07
*CALL,DFXC00
*CALL,DFXC01
*CALL,DFXC20
*CALL,DFXC23
*CALL,DFXC14
*CALL,DFXC04
*CALL,DFXC05
*CALL,DFXPZ0
      REAL XLEVEL(0:MAXLEV,0:MAXFRC),XRESUM(0:MAXLEV,0:MAXFRC)
      REAL XUNLIN(0:MAXLEV,0:MAXFRC),HTLEV(0:MAXLEV,0:MAXFRC)
      REAL ITLEV(0:MAXLEV,0:MAXFRC),YLEVEL(0:MAXLEV,0:MAXFRC)
      REAL CXND(3,1:MAXFRC),CXD(1:MAXFRC)
      REAL YMAX(0:MAXFRC),YMIN(0:MAXFRC)
      REAL YUNLIN(0:MAXLEV,0:MAXFRC),FRACYL(1:MAXFRC)
      REAL GAP(1:MAXFRC),GAPDN(1:MAXFRC),GAPDD(1:MAXFRC)
      INTEGER LEVEL(0:MAXFRC)
      LOGICAL NUMDEN(1:MAXFRC),END
      INTEGER FRAC,LEV,PASS,GOFRAC,CYGOTO,SUGOTO,RESGO,UNGOTO,OUTGO
      INTEGER ACCGO
      LOGICAL STYPE(1:MAXLEV,0:MAXFRC),SEND
C    XLEVEL IS DISTANCE ACTUALLY CLEARED AT ANY LEVEL
C    XRESUM IS DISTANCE AT ANY LEVL TO CLEAR HIGHER LEVELS
C    YLEVEL IS Y BASE HEIGHT AT ANY LEVEL
C    XUNLIN IS INITIATION POINT FOR UNDERLINING AT A LEVEL
C    (AS PATH = RIGHT HAS POSITIVE X VALUES NEGATIVE XUNLIN IF
C    UNDERLINING INACTIVE AT A LEVEL)
C    NOTE - UNDERLINING MUST BE SET AT EACH LEVEL FOR WHICH IT
C           IS REQUIRED, IT IS CANCELLED ON RETURN
C    ITLEV HOLDS ITALIC ANGLE AT LEVEL ON TRANSITION TO HIGHER
C    LEVEL.  ALTHOUGH ITALIC CHANGES ARE UNIVERSAL WHEN DESCENDING
C    A LEVEL IT IS NECESARY TO KNOW PREVIOUS ANGLE AT THAT LEVEL.
C    STYPE HOLDS FLAG FOR SUPER (TRUE)/SUB (FALSE) SCRIPT AT
C    EACH LEVEL
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C    MAXIMUM AND MINIMUM HEIGHTS OF A STRING ARE MAINTAINED
C    THESE MAY BE USED TO FIT A STRING WITHIN A BOX (OR TO
C    ENSURE STRINGS DO NOT GO OUT OF BOUNDS - E.G. IN GRAPH TITLES)
C
C    PRESENT IMPLEMENTATION CALCULATES MINIMUM BELOW AND MAXIMUM
C    ABOVE THE ZERO BASELINE - THUS THE BASELINE IS CONSIDERED
C    AS 'PART' OF THE STRING.  TO AVOID THIS THE INITIAL
C    VALUES OF YMIN(),YMAX() AT EACH LEVEL WOULD NEED TO
C    BE SET WITH CARE.
C
C    YMIN,YMAX ARE MAINTAINED ABOVE THE 0.0 LINE
C    HOWEVER, A NUMBER OF ENHANCEMENTS ARE POSSIBLE
C    IN PARTICULAR:
C
C    SUPERSCRIPTS - MAY OPTIONALLY ADJUST THE BASE LINE SO
C                   THE BASE OF SUPERSCRIPT SITS ON THIS LINE
C                   (DEFAULT ALWAYS PRODUCES THE STRING AT
C                    SUPERSCRIPT BASE LINE)
C
C    SUBSCRIPTS   - MAY OPTIONALLY ADJUST THE BASE LINE SO
C                   THE BASE OF SUBSCRIPT SITS ON THIS LINE
C                   (DEFAULT ALWAYS PRODUCES THE STRING AT
C                    SUBSCRIPT BASE LINE)
C
C        NOTE:  TO ENABLE OPTIONS FOR SUPER/SUB-SCRIPTS WOULD
C               NEED TO ADD LENGTH COMPUTATION PASS AS FOR
C               FRACTIONS SO BASELINE MAY BE ADJUSTED BEFORE
C               THE PLOTTING PASS
C
C    FRACTIONS:
C                   (GAP IS HORIZONTAL BAR BERTWEEN FRACTION COMPONENTS)
C
C    NUMERATOR    - 1. DEFAULT PRODUCES STRING AT NUMERATOR BASE LINE
C                   2. ENSURE MINIMUM OF GAP
C                   3. FORCE GAP TO BE EXACTLY 'GAP'
C                   4. ENSURE GAP NEVER LESS THAN 0
C
C        NOTE:  TO ENABLE OPTIONS FOR NUMERATOR WOULD
C               NEED TO ADD LENGTH COMPUTATION PASS AS FOR
C               DENOMINATOR SO BASELINE MAY BE ADJUSTED BEFORE
C               THE PLOTTING PASS
C
C    DENOMINATOR  - 1. DEFAULT ENSURES MINIMUM OF GAP
C                   2. FORCE GAP TO BE MINIMUM
C                   (1 ASSUMES DENOMINATOR HAS MINIMUM HEIGHT OF HT,
C                    IF ACTUAL HEIGHT IS LESS THEN GAP WILL BE GREATER
C                    - SEE COMMENT AT 1108 TO ENASBLE OPTION 2)
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
      LOGICAL NTHL,ALTL,MONSPL,ITALL,UNL,HVYL,WCTRS,SMMON,SBACK
      INTEGER CFONTL(MAXBET+2),LOWL
      INTEGER DFXM01
      LOGICAL ESC,STRDOL,OVERUN,INLENG,SPEC,APASS
      CHARACTER*5 C
      CHARACTER*12 IMS
      CHARACTER*55 CERR
      CHARACTER*1 ESC1,ESC2
      CHARACTER*39 ESCLST
      CHARACTER*5 ABET
      CHARACTER*6 SM(0:2)
C    ESC1 IS IN-FUNCTION ESCAPE, ESC2 IS OUT-FUNCTION ESCAPE
C    ESCLST IS LIST OF PERMISSIBLE ESCAPE QUALIFIERS -
C    ARRANGED IN GROUPS /ESC2 ONLY/ESC1 AND ESC2/ESC1 ONLY/
C                       /   1:3   /     4:19    /  20:39  /
      DATA IEPT1,IEPT2,IEPT3/4,19,39/
CFT  IEPT3 FOR CHARACTER LIMIT
      DATA ESC1,ESC2/'*','$'/
      DATA ESCLST/'$0Q+-AHI=,.WXTEYULO123NBMP/D:()ZRVSCFJ*'/
      DATA ABET/'123SM'/
      DATA SM(0),SM(1),SM(2)/'VALUE','SYMBOL','MARKER'/
      DATA IMS/', STARTING -'/
      N = LEN(ISYM)
      IF (N.LE.0) GO TO 10000
C    STRING SHOULD NEVER (IN NORMAL USAGE) HAVE ZERO LENGTH
      INLENG = LENGTH
C    STRDOL SET .TRUE. WHEN EMBEDDED ** OR $$ ENCOUNTERED
      STRDOL = .FALSE.
      OVERUN = .FALSE.
      SPEC = .FALSE.
      RXT = 0.0
      BACK = .FALSE.
      END = .FALSE.
      MODIFY = 0
      HTIN = HT
      WCTRS = WCTR
C    SAVE BROKEN LINE PATTERN ACROSS SYMBOL STRINGS
      N1SAV = N1BLP
      XLDSAV = XLDONE
      INTNDS = INTEND
      INTEND = -1
      IDASHS = IDASH
      IF (SDSYM) IDASH = 0
      I1CNT = IOBCNT
      ICSAVE = ICHECK
      ICCSAV = ICSAVE
C    ICCSAV USED DURING FRACTIONS TO AVOID DUPLICATE DIAGNOSTICS
C    FROM THE VARIOUS PASSES
      IF (IABS(ICHECK).GE.2) ICHECK = -2
      ICCS = ICHECK
      IF (LENGTH) GO TO 1
      XO = XPOS
      YO = YPOS
      IF (.NOT.SYMCO) GO TO 1
      XPOS = XS
      YPOS = YS
    1 CX = 0.0
      CY = 0.0
      CXX = 0.0
      CXS = 0.0
      YMAX(0) = CY
      YMIN(0) = CY
      XLEVEL(0,0) = CX
      XRESUM(0,0) = CX
      YLEVEL(0,0) = CY
      PASS = 0
      IF (.NOT.LENGTH) GO TO 2
      ASSIGN 3 TO GOFRAC
C+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      IF (FIT) THEN
                  FITPT1 = 0
                  FITPT2 = 0
      ENDIF
C+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
   32 NTHL = NTH
      IBETL = NBET
      LOWL = NLOW
      ALTL = NALT
      MONSPL = NMONSP
      ITALL = NITAL
      UNL = NUN
      HVYL = NHVY
C    SAVE HEIGHT AND ANY OTHER DYNAMICALLY MODIFIABLE VALUES
      DO 30 I=1,MAXBET+2
   30 CFONTL(I) = CFONT(I)
      GO TO GOFRAC,(3,1207)
    2 X0TS = X0T
      Y0TS = Y0T
      X0T = XPOS
      Y0T = YPOS
      SCALPH = CALPHA
      SSALPH = SALPHA
      CALPHA = CANGL
      SALPHA = SANGL
      WCTR = .TRUE.
      CALL DFX110(0.0,0.0)
    3 IF (TXTCN.AND.NTH) GO TO 4
      NBET = IBET
      NLOW = LOW
      NALT = ALT
      NMONSP = MONSP
      NITAL = ITAL
      NUN = UN
      NHVY = HVY
    4 NTH = .TRUE.
C    NOW SET ANY NON-STANDARD BASIC SELECTIONS
      XUNLIN(0,0) = -1000.
      IF (NUN) THEN
               XUNLIN(0,0) = CX
C    ALLOW FOR MINIMUM VERTICAL EXTENT IF UNDERLINED
               YMIN(0) = MIN(YMIN(0),CY-UNYSP*HT)
      ENDIF
      YUNLIN(0,0) = CY
      NUITAL = 0.0
      IF (NITAL) NUITAL = MUITAL
      ITLEV(0,0) = NUITAL
      IF (LENGTH) GO TO 5
C    SAVE COLOURS/INTENSITIES AND SET RELEVANT BASICS FOR
C    NON-LENGTH EXECUTION OF SYMTXT
      Z0 = ZINT(ICOLPT(2))
      Z1 = ZINT(ICOLPT(IALT))
      Z0H = MAX(MIN(Z0+ZHVY,1.0),0.0)
      Z1H = MAX(MIN(Z1+ZHVY,1.0),0.0)
      IF (NALT) THEN
      IFSET = IALT
      CALL DFX148(IFSET,Z1H)
      ELSE
      IFSET = 2
      CALL DFX148(IFSET,Z0H)
      ENDIF
      IF (NHVY) IFSET = NRGB
      CALL DFX147(IFSET)
    5 CONTINUE
      SPACES = 0.0
      FRAC = 0
      LEV = 0
C    STRING ALWAYS COMMENCES AT BASE LEVEL
      N1 = 1
   21 CONTINUE
*CALL,CHARDEF
   20 IF (N1.GT.N) GO TO 999
      CZ1 = CX
      CZ = CZ1
      N2 = N
      NE1 = 0
      NE2 = 0
      IF (.NOT.NESC) GO TO 7
C    IF ESCAPES ACTIVE MUST PROCESS STRING FOR ESCAPES
CFT  N AS CHARACTER LIMIT
      NE1 = INDEX(ISYM(N1:N),ESC1)
      NE2 = INDEX(ISYM(N1:N),ESC2)
      IF ((NE1+NE2).EQ.0) GO TO 7
C    IF NO ESCAPES DO REMAINDER OF STRING
      IF (NE1.EQ.0) THEN
                        N2 = NE2 - 1
                        ESC = .FALSE.
      ELSE IF (NE2.EQ.0) THEN
                        N2 = NE1 - 1
                        ESC = .TRUE.
      ELSE
                        N2 = MIN0(NE1,NE2) - 1
                        ESC = NE1.LT.NE2
      ENDIF
      N2 = N2 + N1 - 1
      NE1 = NE1 + N1 - 1
      NE2 = NE2 + N1 - 1
C    ESC SET .TRUE. IF NEXT ESCAPE IS ESC1 (I.E. IN FUNCTION),
C    ELSE .FALSE.
C    NOW DO SUBSTRING N1 TO N2
    7 IF (STRDOL) N1 = N1 - 1
      STRDOL = .FALSE.
      IF (N2.LT.N1) GO TO 11
C    SPECIAL CASE OF CONSECUTIVE ESCAPE SEQUENCES
   15 I = N1
      IF (I.GT.N2) GO TO 17
C    EQUIVALENT TO DO 10 I=N1,N2 BUT PERMITTING ENTRY WITHIN RANGE
   16 NCHAR = DFXM01(ISYM(I:I))
C++++++++++++++NCHAR NEGATIVE (OR ZERO) INVALID CHAR ISYM(I)++++++++++
      IF (NCHAR.LE.0) GO TO 4020
      IF (MODIFY.NE.0) THEN
                            NCHAR = NCHAR + MODIFY
                            IF (NCHAR.LE.0.OR.NCHAR.GT.96) GO TO 4022
                            MODIFY = 0
      ENDIF
      IF (NLOW.EQ.0) GO TO 8
      IF (NLOW.LT.0) THEN
             IF (NCHAR.GT.96) NCHAR = NCHAR + NLOW
      ELSE
             IF ((NCHAR.LE.64).AND.(NCHAR.GE.33)) NCHAR = NCHAR + NLOW
      ENDIF
    8 IXTENT = RXTENT(NCHAR,NBET) - LXTENT(NCHAR,NBET)
      L1 = LBYTEA(NCHAR-1,NBET) + 1
      L2 = LBYTEA(NCHAR,NBET)
   14 IF (L1.LT.L2) GO TO 9
      IF (BACK) GO TO 13
C    NULL OR BLANK CAN BE SKIPPED IF BACKSPACE ACTIVE
      RXT = 0.0
C    HERE IF BLANK OR NULL
C    SKIP IF NULL
      IF (IXTENT.EQ.0) GO TO 12
      IF (NMONSP) IXTENT = -MHWLRU(NBET)+MHWRRU(NBET)
C    HAVE SPACE SO GET VALUE - TAKE INTO ACCOUNT CSEP
      XTENT = IXTENT*CXF + CSEP
      RXT = .5*FLOAT(IXTENT)*CXF + CSEP
      IF ((FRAC+LEV).EQ.0) THEN
C
C    BASE LEVEL ONLY
C
C
C+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
                               IF (FIT) THEN
                                         IF (CX.GE.XFIT) THEN
                                                 FITPT2 = I-1
                                                 SPACE2 = SPACES
                                                 XFIT2 = CX
                                                 N2 = N
                                                 I = N2 + 1
                                         ELSE
                                                 FITPT1 = I - 1
                                                 SPACE1 = SPACES
                                                 XFIT1 = CX
                                         ENDIF
                                ENDIF
C+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
C
C    SPACES MAY BE PROPORTIONAL IN EITHER MONO OR PROPORTIONAL MODE
                               XTENT = XTENT*SPFACT
                               RXT = RXT*SPFACT
                               SPACES = SPACES + XTENT
C    ACCUMULATE LENGTH OF SPACES IN SPACES FOR LEFT+RIGHT JUSTIFICATION
C
      ENDIF
      CX = CX + XTENT
   13 BACK = .FALSE.
      GO TO 10
    9 CALL DFX202(NCHAR,L1,L2)
C    DO INDIVIDUAL CHARACTER
C    ACCUMULATE MINIMUM/MAXIMUM VERTICAL EXTENT
C    (REFLECT ACTUAL CHAR SIZES)
      IB1 = LYTENT(NCHAR,NBET)*CYF
      IB2 = UYTENT(NCHAR,NBET)*CYF
      YMIN(FRAC) = MIN(YMIN(FRAC),CY+LYTENT(NCHAR,NBET)*CYF)
      YMAX(FRAC) = MAX(YMAX(FRAC),CY+UYTENT(NCHAR,NBET)*CYF)
C    NOTE - THE FOREGOING IS FOR BASIC CHARACTERS, ACCENTS
C           ARE PROCESSED ELSEWHERE (AS IS UNDERLINING)
   12 CZ = CX
C   SN.10 EQUIVALENT CONTINUE AT END OF LOOP
   10 I = I + 1
      IF (I.LE.N2) GO TO 16
   17 CONTINUE
      IF ((LEV+FRAC).EQ.0) THEN
                               IF (CZ.GT.CZ1) THEN
                                              CXX = CZ - CSEP
                                              CXS = CX - CSEP
                               ENDIF
      ENDIF
      N1 = N2 + 1
C    NOW SEE IF WHOLE STRING COMPLETE
      XLEVEL(LEV,FRAC) = CX
      XRESUM(LEV,FRAC) = CX
C**   IF (SPEC) GO TO OUTGO,(1125,1226)
C**   SIEMENS FORTAN GIVES ERROR:
C**          "JZK112I-E .. SYMBOLIC NAME EXCEEDS 6 CHARACTERS"
C**   WHEN ASSIGNED GO TO FOLLOWS IF .. HENCE CRUDE WORKAROUND!
      IF (SPEC) THEN
          GO TO OUTGO,(1125,1226)
      ENDIF
C**
      IF (N2.EQ.N) GO TO 999
C    MUST HAVE ESCAPE CHARACTER
   11 IF (.NOT.ESC) GO TO 2000
      N1 = NE1 + 1
C    POINT TO ESCAPE DESCRIPTOR
      IF (N1.GT.N) GO TO 999
C    IGNORE IF STRING EXHAUSTED
      IPT = INDEX(ESCLST(IEPT1:IEPT3),ISYM(N1:N1))
      N1 = N1 + 1
C    CLEAR ESCAPE DESCRIPTOR
      IF (IPT.LE.0) GO TO 4007
C    DIAGNOSTIC AND OPTIONAL CONTINUE
      GO TO (1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,
     1       1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,
     2       1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,
     3       1031,1032,1033,1034,1035,1036),IPT
C    JUMP TO DESCRIPTOR TYPE
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C    +  SUPERSCRIPT IN
 1001 IF (LEV.EQ.MAXLEV) GO TO 3001
      STYPE(LEV+1,FRAC) = .TRUE.
      HTLEV(LEV,FRAC) = HT
      YLEVEL(LEV,FRAC) = CY
      IF (OVERUN) THEN
                    CY = CY + HT + HT*OVERY
C               FIRST HT SHOULD BE ACTUAL HEIGHT OF PREVIOUS CHARACTER
                    HT = HT*OVERH
                  ELSE
                    IF (RELSUP) THEN
C     IF SUPERCRIPT RELATIVE TO ACTUAL TOP OF LAST CHARACTER
                       CY = MAX((CY+HT*SUBY),(CY+HT+HT*SUPY))
C     WHEN RELATIVE FIRST HT IS ACTUAL HEIGHT OF LAST CHARACTER
C     SUPY IS NORMALLY NEGATIVE (SO LIES BELOW TOP)
                                ELSE
                       CY = CY + HT + HT*SUPY
                                ENDIF
                       HT = HT*SUPH
      ENDIF
      GO TO 1102
C    - SUBSCRIPT IN
 1002 IF (LEV.EQ.MAXLEV) GO TO 3002
      STYPE(LEV+1,FRAC) = .FALSE.
      HTLEV(LEV,FRAC) = HT
      YLEVEL(LEV,FRAC) = CY
      IF (OVERUN) THEN
                       CY = CY -HT*UNDERY
C               OLD CY SHOULD BE ACTUAL BASE OF PREVIOUS CHARACTER
                       HT = HT*OVERH
                       CY = CY - HT
                  ELSE
                       CY = CY + HT*SUBY
                       HT = HT*SUBH
      ENDIF
 1102 ASSIGN 1202 TO CYGOTO
 1302 DO 1402 I=0,FRAC
      IF (I.EQ.FRAC) THEN
                          L = LEV
                     ELSE
                          L = LEVEL(I)
      ENDIF
      DO 1502 J=0,L
      IF (XUNLIN(J,I).GE.0.) YUNLIN(J,I) = MIN(YUNLIN(J,I),CY)
 1502 CONTINUE
 1402 CONTINUE
      GO TO CYGOTO,(20,21,999,1202)
 1202 CX = XLEVEL(LEV,FRAC) + (CY-YLEVEL(LEV,FRAC))*ITLEV(LEV,FRAC)
      LEV = LEV + 1
      YLEVEL(LEV,FRAC) = CY
      NUN = .FALSE.
      XUNLIN(LEV,FRAC) = -1000.
      ITLEV(LEV,FRAC) = NUITAL
      RXT = 0.0
      BACK = .FALSE.
      GO TO 21
C    A ALTERNATE TYPE SELECT
 1003 IF (NALT) GO TO 20
      NALT = .TRUE.
      IF (LENGTH) GO TO 20
      IFSET = IALT
      CALL DFX148(IFSET,Z1H)
      IF (NHVY) IFSET = NRGB
      CALL DFX147(IFSET)
      GO TO 20
C    H HEAVY TYPE SELECT
 1004 IF (NHVY) GO TO 20
      NHVY = .TRUE.
      IF (LENGTH) GO TO 20
      CALL DFX147(NRGB)
      GO TO 20
C    I ITALIC SELECT
 1005 IF (NITAL) GO TO 20
      NITAL = .TRUE.
      NUITAL = MUITAL
      ITLEV(LEV,FRAC) = NUITAL
      IF (NUITAL.LT.0.0) CX = CX - HT*NUITAL
      GO TO 20
C    = UNDERLINE SELECT
 1006 IF (NUN) GO TO 20
      NUN = .TRUE.
      XUNLIN(LEV,FRAC) = CX
      YUNLIN(LEV,FRAC) = CY
      YMIN(FRAC) = MIN(YMIN(FRAC),CY-UNYSP*HT)
      GO TO 20
C    , FRACTION NUMERATOR COMMENCE
 1007 IF (FRAC.EQ.MAXFRC) GO TO 4010
      RXT = 0.0
      BACK = .FALSE.
      LEVEL(FRAC) = LEV
      YLEVEL(LEV,FRAC) = CY
      HTLEV(LEV,FRAC) = HT
      FRAC = FRAC + 1
      LEV = 0
      FRACYL(FRAC) = CY + HT*FRACM
      NUN = .FALSE.
      XUNLIN(LEV,FRAC) = -1000.
      NUMDEN(FRAC) = .TRUE.
      IF (LENGTH) GO TO 1107
      PASS = FRAC
      LENGTH = .TRUE.
      ASSIGN 1207 TO GOFRAC
      GO TO 32
 1207 N1FRAC = N1
 1107 CXND(1,FRAC) = CX
      HT = HT*FRACHT
      GAP(FRAC) = HT*FRACGP
      CY = FRACYL(FRAC) + GAP(FRAC)
      YMIN(FRAC) = CY
      YMAX(FRAC) = CY
      YLEVEL(LEV,FRAC) = CY
      GO TO 21
C    . FRACTION DENOMINATOR COMMENCE
 1008 IF (.NOT.NUMDEN(FRAC)) GO TO 4012
C    ONLY GIVE DIAGNOSTIC DURING PASS PHASE FOR FRACTION
      RXT = 0.0
      NUMDEN(FRAC) = .FALSE.
C    CLEAR SUPER-/SUB- SCRIPTS TO BASE LEVEL HERE
      ILAST = 1
      ASSIGN 1108 TO SUGOTO
      IF (LEV.GT.0) GO TO 2604
 1108 IF (LENGTH) THEN
           CXND(2,FRAC) = CX
           GAPDN(FRAC) = (FRACYL(FRAC) + GAP(FRAC)) - YMIN(FRAC)
           YMAX(FRAC) = YMAX(FRAC) + GAPDN(FRAC)
           YMIN(FRAC) = YMIN(FRAC) + GAPDN(FRAC)
           YMAX(FRAC-1) = MAX(YMAX(FRAC-1),YMAX(FRAC))
           YMIN(FRAC-1) = MIN(YMIN(FRAC-1),YMIN(FRAC))
           CX = CXND(1,FRAC)
           LEV = 0
           CY = FRACYL(FRAC) - GAP(FRAC) - HT
           YMIN(FRAC) = CY
           YMAX(FRAC) = CY
      ELSE
           IF (NUN) THEN
C    DO ANY UNDERLINING
                   Y = YUNLIN(LEV,FRAC) - UNYSP*HT
                   CALL DFX110(XUNLIN(LEV,FRAC),Y)
                   CALL DFX106(CX,Y)
           ENDIF
C    DO FRACTION BAR
           CALL DFX110(CXND(1,FRAC),FRACYL(FRAC))
           CALL DFX106(CXND(3,FRAC),FRACYL(FRAC))
           CX = CXND(1,FRAC) + CXD(FRAC)
           LEV = 0
           XUNLIN(LEV,FRAC) = -1000.
           NUN = .FALSE.
           CY = FRACYL(FRAC) - GAP(FRAC) - GAPDD(FRAC) -HT
C    THIS VERTICAL POSITIONING ASSUMES DENOMINATOR HAS A MINIMUM
C    HEIGHT ALLOWANCE OF HT.  COMPENSATION FOR CUMULATIVE
C    SUPERSCRIPT HEIGHTS BEYOND THAT IS MADE AT SN.2210 IN
C    CALCULATION OF GAPDD.
C    IF DENOMINATORS OF LESS THAN HT ARE REQUIRED THEN APPROPRIATE
C    ADJUSTMENT MUST BE MADE IN CALCULATION OF GAPDD.
      ENDIF
      YLEVEL(LEV,FRAC) = CY
      ASSIGN 20 TO CYGOTO
      IF (.NOT.LENGTH) GO TO 1302
      GO TO 20
C    W THICKNESS SELECT
 1009 GO TO 5000
C    X SIZE SELECT
 1010 GO TO 5000
C    T TAB SELECT
 1011 IF (.NOT.BLKTXT) GO TO 4050
      GO TO 5000
C    E BLOCK END
 1012 IF (.NOT.BLKTXT) GO TO 4050
      GO TO 5000
C    Y CHARACTER Y-POSITION SELECT
 1013 GO TO 5000
C    U UPPER CASE SELECT
 1014 NLOW = -32
      GO TO 20
C    L LOWER CASE SELECT
 1015 NLOW = +32
      GO TO 20
C    O OVER/UNDER SELECT FOR SUPER/SUB SCRIPTS
 1016 OVERUN = .TRUE.
      GO TO 20
C    1 ALPHABET 1 SELECT
 1017 NBET = 1
      GO TO 21
C    2 ALPHABET 2 SELECT
 1018 I = 2
      IF (I.GT.MAXBET) GO TO 4032
      NBET = 2
      GO TO 21
C    3 ALPHABET 3 SELECT
 1019 I = 3
      IF (I.GT.MAXBET) GO TO 4032
      NBET = 3
      GO TO 21
C    N NULL CHARACTER (USED IN SUPER/SUB-SCRIPTS)
 1020 XLEVEL(LEV,FRAC) = CX
      XRESUM(LEV,FRAC) = CX
      GO TO 20
C    B BACK SPACE FOLLOWING RELATIVE TO CENTRE OF PREVIOUS CHARACTER
 1021 IF (BACK.OR.(RXT.EQ.0.0)) GO TO 20
      BACK = .TRUE.
      XLEVEL(LEV,FRAC) = XLEVEL(LEV,FRAC) - RXT
      GO TO 20
C    M MONO-SPACE SELECT
 1022 NMONSP = .TRUE.
      NCOX = -MHWLRU(NBET)
      GO TO 20
C    P PROPORTIONAL SPACING SELECT
 1023 NMONSP = .FALSE.
      GO TO 20
C    / FONT LOAD
 1024 I = INDEX(ABET,ISYM(N1:N1))
      N1 = N1 + 1
      IF (N1.GT.N) GO TO 4030
      IF (ISYM(N1:N1).NE.'/') GO TO 4030
      N1 = N1 + 1
      IF (N1.GT.N) GO TO 4030
      CALL DFX207(ISYM,N1,N,'/',0,RRES,IRES,ILIM)
      IF (ILIM.NE.1) GO TO 4030
      IF (I.LT.4) CALL DFX208(I,IRES)
      IF (I.EQ.4) CALL DFX210(IRES)
      IF (I.EQ.5) CALL DFX209(IRES)
      GO TO 21
C    D (DIACRITIC) ACCENT PAIR FOLLOWS
 1025 IF (N1.GT.N) GO TO 999
C    END IF NO CHARACTER
      APASS = .FALSE.
      SBACK = BACK
      CXA = CX
      IF (.NOT.LENGTH.AND.(N1.LT.N).AND..NOT.NMONSP) THEN
                        LENGTH = .TRUE.
                        APASS = .TRUE.
                        NACCNT = N1
      ENDIF
 1925 N2 = N1
C    GO DO SINGLE CHARACTER
      ASSIGN 1125 TO OUTGO
      SPEC = .TRUE.
      BACK = SBACK
      GO TO 15
C    NOW PROCESS ACCENTS
 1125 N2 = N
      RXTA = RXT - CSEP
      RXTB = 0.0
      SPEC = .FALSE.
      IF (ISYM(N1:N1).EQ.'(') GO TO 1325
C    SKIP ACCENT IF INVALID CHARACTER
      IF ((NCHAR.LE.0).OR.(NCHAR.GT.96)) GO TO 1225
C    HERE IF SINGLE DIACRITIC ONLY
      NCHARA = DFXM01(ISYM(N1:N1)) - 33 + 96
      ASSIGN 1225 TO RESGO
      IF ((NCHARA.LE.96).OR.(NCHARA.GT.120)) GO TO 4024
      L1 = LBYTEA(NCHARA-1,NBET) + 1
      L2 = LBYTEA(NCHARA,NBET)
      IF (L1.GE.L2) GO TO 1225
C    LENGTH ENTRY TO DFX203 RETURNS L2 AS RELATIVE/ABSOLUTE
      CALL DFX203(NCHAR,NCHARA,L1,L2)
      IF (.NOT.NMONSP.AND.LENGTH) THEN
            RXTB = -FLOAT(LXTENT(NCHARA,NBET))*CXF
C    ABSOLUTE ACCENT COORDINATES (L2 = 0)
            IF(L2.EQ.0) RXTB=(RXTB-FLOAT(LXTENT(NCHAR,NBET))*CXF)+RXTA
      ENDIF
      ASSIGN 1225 TO ACCGO
C    NOW ACCUMULATE VERTICAL MINIMUM/MAXIMUM
 2025 IA1 = LYTENT(NCHAR,NBET)
      IA2 = UYTENT(NCHAR,NBET)
      IAA1 = ABS(IA1)
      IAA2 = ABS(IA2)
      IF ((IAA1+IAA2).NE.0) THEN
C    BOTH ZERO --> ACCENT WITHIN CHARACTER SPACE
C
C    FIRST LOOK AT MINIMUM
          IF (IAA1.LT.100) THEN
C        ABSOLUTE MINIMUM
              YMIN(FRAC) = MIN(YMIN(FRAC),CY+IA1*CYF)
          ELSE
C        OTHERWISE RELATIVE TO CHARACTER
              IF (IA1.GT.0) THEN
C           RELATIVE TO CHARACTER MAXIMUM
                 IA1 = IA1 - 100
                 YMIN(FRAC) = MIN(YMIN(FRAC),CY+IB2+IA1*CYF)
              ELSE
C           RELATIVE TO CHARACTER MINIMUM
                 IA1 = IA1 + 100
                 YMIN(FRAC) = MIN(YMIN(FRAC),CY+IB1+IA1*CYF)
              ENDIF
          ENDIF
C    SECOND LOOK AT MAXIMUM
          IF (IAA2.LT.100) THEN
C        ABSOLUTE MAXIMUM
              YMAX(FRAC) = MAX(YMAX(FRAC),CY+IA2*CYF)
          ELSE
C        OTHERWISE RELATIVE TO CHARACTER
              IF (IA2.GT.0) THEN
C           RELATIVE TO CHARACTER MAXIMUM
                 IA2 = IA2 - 100
                 YMAX(FRAC) = MAX(YMAX(FRAC),CY+IB2+IA2*CYF)
              ELSE
C           RELATIVE TO CHARACTER MINIMUM
                 IA2 = IA2 + 100
                 YMAX(FRAC) = MAX(YMAX(FRAC),CY+IB1+IA2*CYF)
              ENDIF
          ENDIF
      ENDIF
C    HAVE ACCUMULATED ACCENT VERTICAL EXTENTS
      GO TO ACCGO,(1225,1426,1625)
 1225 N1 = N1 + 1
 1825 RXTA = MAX(RXTB-RXTA,0.0)
      IF (APASS) THEN
                 APASS = .FALSE.
                 LENGTH = .FALSE.
                 CX = CXA + RXTA
                 N1 = NACCNT
                 GO TO 1925
      ENDIF
      IF (LENGTH) THEN
                 CX = CX + RXTA
                 CXX = CXX + RXTA
                 CXS = CXX
                 XLEVEL(LEV,FRAC) = CX
                 XRESUM(LEV,FRAC) = CX
      ENDIF
      GO TO 20
C    ELSE DO COMPOSITE ACCENTS
 1325 N1 = N1 + 1
      IF (N1.GT.N) GO TO 999
      N3 = INDEX(ISYM(N1:N),')')
      IF (N3.EQ.1) THEN
                       N1 = N1 + 1
                       GO TO 1825
      ENDIF
      IF (N3.LE.0) THEN
                       N3 = N
                   ELSE
                       N3 = (N1 - 2) + N3
      ENDIF
C    SKIP ACCENTS IF INVALID CHARACTER
      IF ((NCHAR.LE.0).OR.(NCHAR.GT.96)) GO TO 1625
      ASSIGN 1425 TO RESGO
 1425 ILOOP1 = N1
 1426 DO 1525 I=ILOOP1,N3
      NCHARA = DFXM01(ISYM(I:I)) - 33 + 96
      IF ((NCHARA.LE.96).OR.(NCHARA.GT.120)) GO TO 4024
      L1 = LBYTEA(NCHARA-1,NBET) + 1
      L2 = LBYTEA(NCHARA,NBET)
      IF (L1.GE.L2) GO TO 1525
C    LENGTH ENTRY TO DFX203 RETURNS L2 AS RELATIVE/ABSOLUTE
      CALL DFX203(NCHAR,NCHARA,L1,L2)
      IF (.NOT.NMONSP.AND.LENGTH) THEN
            RXTC = -FLOAT(LXTENT(NCHARA,NBET))*CXF
C    ABSOLUTE ACCENT COORDINATES (L2 = 0)
            IF(L2.EQ.0) RXTC=(RXTC-FLOAT(LXTENT(NCHAR,NBET))*CXF)+RXTA
            RXTB = MAX(RXTB,RXTC)
      ENDIF
C    MUST AVOID TRANSFER BACK INTO LOOP
      IF (I.EQ.N3) THEN
C    LOOP FINISHED - SO QUIT IT
           ASSIGN 1625 TO ACCGO
      ELSE
C    LOOP INCOMPLETE - SO RESTART IT
           ASSIGN 1426 TO ACCGO
           ILOOP1 = I + 1
      ENDIF
      GO TO 2025
 1525 CONTINUE
 1625 N1 = N3 + 2
      GO TO 1825
C    : SPECIAL/MARKER SYMBOL SELECT
 1026 IF (N1.GT.N) GO TO 999
      IS = 1
      ISNO = 96
      IF (ISYM(N1:N1).NE.':') GO TO 1126
      N1 = N1 + 1
      IF (N1.GT.N) GO TO 999
      IS = 2
      ISNO = 48
 1126 CALL DFX207(ISYM,N1,N,':',-2,RRES,NCHAR,ILIM)
C     N.B. DELIMITER REDUNDANT, 2 DIGITS EXPECTED
C          - ILIM RETURN SHOULD BE POSITIVE (0 IF INVALID CHARACTER)
C            (-1 AT END OF STRING ACCEPTED)
      IF (ILIM.LT.-1) GO TO 4026
      IF (NCHAR.LE.0.OR.NCHAR.GT.ISNO) GO TO 4028
      ISS = NBET
      NBET = IS + MAXBET
      SMMON = NMONSP
      IF (IS.EQ.2) THEN
C    MARKERS ALWAYS CONSIDERED MONO
                    NMONSP = .TRUE.
                    IXTENT = MHWRRU(NBET) - MHWLRU(NBET)
                    L1 = LBYTEM(NCHAR-1) + 1
                    L2 = LBYTEM(NCHAR)
                   ELSE
                    IXTENT = RXTENT(NCHAR,NBET) - LXTENT(NCHAR,NBET)
                    L1 = LBYTES(NCHAR-1) + 1
                    L2 = LBYTES(NCHAR)
      ENDIF
*CALL,CHARDEF
      ASSIGN 1226 TO OUTGO
      SPEC = .TRUE.
      N2 = N1 - 1
      I = N2
      GO TO 14
 1226 SPEC = .FALSE.
      NBET = ISS
      NMONSP = SMMON
*CALL,CHARDEF
      GO TO 21
C    ( LEFT COLUMN MAPPING
 1027 MODIFY = -16
      GO TO 20
C    ) RIGHT COLUMN MAPPING
 1028 MODIFY = +16
      GO TO 20
C    Z DYNAMIC SPECIFICATION CHANGE
 1029 GO TO 5000
C    R RESELECT DEFAULTS
 1030 GO TO 5000
C    V CHARACTER BY VALUE
 1031 IS = 0
      ISNO = 96
      CALL DFX207(ISYM,N1,N,':',-2,RRES,NCHAR,ILIM)
C     N.B. DELIMITER REDUNDANT, 2 DIGITS EXPECTED
C          - ILIM RETURN SHOULD BE POSITIVE (0 IF INVALID CHARACTER)
C            (-1 AT END OF STRING ACCEPTED)
      IF (ILIM.LT.-1) GO TO 4026
      IF (NCHAR.LE.0.OR.NCHAR.GT.ISNO) GO TO 4028
      N2 = N1 - 1
      I = N2
      GO TO 8
C    S TAB SET
 1032 IF (.NOT.BLKTXT) GO TO 4050
      GO TO 5000
C    C CARRIAGE RETURN
 1033 IF (.NOT.BLKTXT) GO TO 4050
      GO TO 5000
C    F LINE FEED
 1034 IF (.NOT.BLKTXT) GO TO 4050
      GO TO 5000
C    J LINE FEED/CARRIAGE RETURN (JUMP)
 1035 IF (.NOT.BLKTXT) GO TO 4050
      GO TO 5000
C    * OR $ EMBEDDED ASTERISK OR DOLLAR
 1036 STRDOL = .TRUE.
      IF (N1.LE.N) GO TO 20
      N2 = N
      GO TO 7
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C    ESCAPE TYPE 2
 2000 N1 = NE2 + 1
C    POINT TO ESCAPE DESCRIPTOR
      IF (N1.GT.N) GO TO 999
C    IGNORE IF STRING EXHAUSTED
      IPT = INDEX(ESCLST(1:IEPT2),ISYM(N1:N1))
      N1 = N1 + 1
C    SPACE PAST ESCAPE CHARACTER
      IF (IPT.LE.0) GO TO 4007
C    CHECK VALID
      GO TO (1036,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,
     1       2011,2012,2013,2014,2015,2016,2017,2018),IPT
C-----------------------------------------------------------------------
C    $ EMBEDDED DOLLAR REROUTED TO SN.1036
C    0 RESET ALL SUPER/SUB-SCRIPTS TO BASE LEVEL
 2001 IF (LEV.EQ.0) GO TO 20
      ILAST = 1
      GO TO 2204
C    Q QUITS SUPER/SUB-SCRIPTS AND FRACTIONS TO BASE LEVEL
 2002 IF ((FRAC+LEV).EQ.0) GO TO 20
      IF (FRAC.EQ.0) GO TO 2001
C    TERMINATE CURRENT FRACTION AND RELY ON POINTERS TO
C    REPEAT THIS SEQUENCE UNTIL RETURNED TO BASE LEVEL
      GO TO 2010
C    + SUPERSCRIPT OUT
 2003 IF (LEV.EQ.0) GO TO 4001
      SEND = .TRUE.
      GO TO 2104
C    - SUBSCRIPT OUT
 2004 IF (LEV.EQ.0) GO TO 4002
      SEND = .FALSE.
 2104 RXT = 0.0
      DO 2304 ILAST=LEV,1,-1
      IF (STYPE(ILAST,FRAC).EQV.SEND) GO TO 2204
 2304 CONTINUE
      GO TO 4005
 2204 ASSIGN 21 TO SUGOTO
 2604 IF (.NOT.NUN) GO TO 2504
      IF (LENGTH) GO TO 2504
      Y = YUNLIN(LEV,FRAC) - UNYSP*HT
      CALL DFX110(XUNLIN(LEV,FRAC),Y)
      CALL DFX106(CX,Y)
 2504 LEV = LEV - 1
      HT = HTLEV(LEV,FRAC)
      CY = YLEVEL(LEV,FRAC)
      XRESUM(LEV,FRAC) = MAX(XRESUM(LEV,FRAC),CX-NUITAL*
     1                              (YLEVEL(LEV+1,FRAC)-CY))
      CX = XRESUM(LEV,FRAC)
      IF ((LEV+FRAC).EQ.0) THEN
                        CXX = CX
                        CXS = CX
      ENDIF
      NUN = (XUNLIN(LEV,FRAC).GE.0.0)
      IF (LEV.GE.ILAST) GO TO 2604
      GO TO SUGOTO,(21,998,1108,2210)
C    A CLEAR ALTERNATE TYPE
 2005 IF (.NOT.NALT) GO TO 20
      NALT = .FALSE.
      IF (LENGTH) GO TO 20
      IFSET = 2
      CALL DFX148(IFSET,Z0H)
      IF (NHVY) IFSET = NRGB
      CALL DFX147(IFSET)
      GO TO 20
C    H CLEAR HEAVY TYPE
 2006 IF (.NOT.NHVY) GO TO 20
      NHVY = .FALSE.
      IF (LENGTH) GO TO 20
      IFSET = 2
      IF (NALT) IFSET = IALT
      CALL DFX147(IFSET)
      GO TO 20
C    I CLEAR ITALICS
 2007 IF (.NOT.NITAL) GO TO 20
      NITAL = .FALSE.
      IF (NUITAL.GT.0.0) CX = CX + HT*NUITAL
      NUITAL = 0.0
      ITLEV(LEV,FRAC) = NUITAL
      GO TO 20
C    = CLEAR UNDERLINE
 2008 IF (.NOT.NUN) GO TO 20
      ASSIGN 20 TO UNGOTO
 2208 NUN = .FALSE.
      IF (LENGTH) GO TO 2108
      Y = YUNLIN(LEV,FRAC) - UNYSP*HT
      CALL DFX110(XUNLIN(LEV,FRAC),Y)
      CALL DFX106(CX,Y)
 2108 XUNLIN(LEV,FRAC) = -1000.
C    NECESSARY TO COMPUTE CORRECT LENGTH IN CASE UNDERLINED BLANKS
      IF ((LEV+FRAC).EQ.0) THEN
                        CXX = CX
                        CXS = CX
      ENDIF
      GO TO UNGOTO,(20,997)
C    , TERMINATE FRACTION NUMERATOR
C                (EQUIVALENT TO COMMENCE DENOMINATOR)
 2009 GO TO 1008
C    . TERMINATE FRACTION
C                (EQUIVALENT TO TERMINATING DENOMINATOR)
 2010 IF (FRAC.EQ.0) GO TO 4014
      IF (NUMDEN(FRAC)) GO TO 4014
      RXT = 0.0
C    CLEAR SUPER-/SUB- SCRIPTS TO BASE LEVEL HERE
      ILAST = 1
      ASSIGN 2210 TO SUGOTO
      IF (LEV.GT.0) GO TO 2604
 2210 CXMAX = MAX(CX,CXND(2,FRAC))
      IF (LENGTH) THEN
           GAPDD(FRAC) = YMAX(FRAC) - (FRACYL(FRAC) - GAP(FRAC))
           YMIN(FRAC) = YMIN(FRAC) - GAPDD(FRAC)
           YMAX(FRAC) = YMAX(FRAC) - GAPDD(FRAC)
           YMIN(FRAC-1) = MIN(YMIN(FRAC-1),YMIN(FRAC))
           YMAX(FRAC-1) = MAX(YMAX(FRAC-1),YMAX(FRAC))
           IF (PASS.EQ.FRAC) THEN
                CDIFF = .5*(CXND(2,FRAC)-CX)
                CXND(3,FRAC) = CXMAX
                IF (CDIFF.LT.0.) THEN
                     CX = CXND(1,FRAC) - CDIFF
                     CXD(FRAC) = 0.0
                ELSE
                     CX = CXND(1,FRAC)
                     CXD(FRAC) = CDIFF
                ENDIF
                N1 = N1FRAC
                LENGTH = .FALSE.
                PASS = 0
                ICSAVE = 0
C         AVOID DUPLICATE DIAGNOSTICS DURING REPEAT PASS OF FRACTION(S)
                ASSIGN 2110 TO GOFRAC
                GO TO 34
           ENDIF
      ENDIF
      IF (.NOT.LENGTH) THEN
                           IF (NUN) THEN
C    DO ANY UNDERLINING
                                 Y = YUNLIN(LEV,FRAC) - UNYSP*HT
                                 CALL DFX110(XUNLIN(LEV,FRAC),Y)
                                 CALL DFX106(CX,Y)
                           ENDIF
      ENDIF
      CX = CXMAX
      FRAC = FRAC - 1
      IF (FRAC.EQ.0) ICSAVE = ICCSAV
C    RESTORE DIAGNOSTIC LEVEL
      LEV = LEVEL(FRAC)
      CY = YLEVEL(LEV,FRAC)
      HT = HTLEV(LEV,FRAC)
      NUN = (XUNLIN(LEV,FRAC).GE.0.0)
      ASSIGN 21 TO CYGOTO
      IF ((FRAC.EQ.0).AND.END) ASSIGN 999 TO CYGOTO
      GO TO 1302
 2110 NUMDEN(FRAC) = .TRUE.
      CY = FRACYL(FRAC) + GAP(FRAC) + GAPDN(FRAC)
      XUNLIN(LEV,FRAC) = -1000.
      GO TO 21
C    W RESET THICKNESS
 2011 GO TO 5000
C    X RESET SIZE
 2012 GO TO 5000
C    T CLEAR ALL TABS
 2013 IF (.NOT. BLKTXT) GO TO 4050
      GO TO 5000
C    E PAGE END
 2014 IF (.NOT.BLKTXT) GO TO 4050
      GO TO 5000
C    Y RESET Y-OFFSET
 2015 GO TO 5000
C    U RESET NO MAPPING FOR CASE
 2016 NLOW = 0
      GO TO 20
C    L RESET NO MAPPING FOR CASE
 2017 NLOW = 0
      GO TO 20
C    O OVER/UNDER SETTING FOR SUPER/SUB SCRIPTS CANCELLED
 2018 OVERUN = .FALSE.
      GO TO 20
C-----------------------------------------------------------------------
C
C***********************************************************************
C
C    TERMINATION
C
  999 END = .TRUE.
C    *******FORCE ZERO LEVEL/FRACTION AND MOVE TO END OF STRING
C           WITH OFF2 IF (.NOT.LENGTH)
C
      IF ((FRAC+LEV).EQ.0) GO TO 998
      IF (FRAC.NE.0) GO TO 2010
      ILAST = 1
      ASSIGN 998 TO SUGOTO
      GO TO 2604
  998 ASSIGN 997 TO UNGOTO
      IF (NUN) GO TO 2208
  997 LENGTH = INLENG
      IF (LENGTH) GO TO 101
      CALL DFX110(CX,CY)
C    CHECK CY CORRECT FOR Y-LEVEL
      XS = XPOS
      YS = YPOS
      XPOS = XO
      YPOS = YO
      X0T = XPOS
      Y0T = YPOS
      CALL DFX110(0.,0.)
      X0T = X0TS
      Y0T = Y0TS
      CALPHA = SCALPH
      SALPHA = SSALPH
      CALL DFX147(1)
      I2CNT = IOBCNT
      ICHECK = ICCSAV
      IF (I2CNT.EQ.I1CNT) GO TO 100
      M1 = 1
      J = MIN(N,100)
      IF (N.GT.J) M1 = 12
      IF (ICHECK.EQ.2) WRITE(ERRREC,23)ROUTIN,N,IMS(M1:12),ISYM(1:J)
   23 FORMAT(1H0,'**DIMFILM WARNING**  OUT OF BOUNDS DETECTED BY TEXT RE
     1FERENCE FROM ',A,'; CALL WAS FOR ',I6,' CHARACTERS',A/
     2  1H ,19X,A)
*CALL,LINOUT1
      IF (IABS(ICHECK).NE.3.OR.XPASS.LT.0.) GO TO 100
      STR150 = ISYM
      CALL DFX001('SYMTXT',9)
  101 XPASS = CXX
C**************************************************************
C    THIS DERIVATION OF LENGTH EXCLUDES TRAILING BLANKS AND
C    IS ACCURATE AT BASE LEVEL, HAVING REGARD TO CHARACTER
C    SEPARATION.  IF STRING ENDS IN SUPER-/SUB-SCRIPT THE
C    LENGTH WILL POINT TO BASE LEVEL RESUMPTION POINT
C    (TRAILING BLANKS AT SCRIPT LEVELS ABOVE BASE WILL BE
C    TREATED AS ANY OTHER CHARACTER).
C    FOR THIS DERIVATION CXX MUST BE RESET TO BASE LEVEL ON
C    LEAVING SUPER/SUB-SCRIPT AND CSEP MUST BE SUBTRACTED IF A
C    CHARACTER HAS BEEN PLOTTED AT LOWEST LEVEL FOR LENGTH TO
C    ACCURATELY REFLECT PLOTTED LENGTH OF STRING
C    NOTE - A NULL WILL FORCE LENGTH TO INCLUDE PRECEDING
C           BLANKS OR CHARACTER SEPARATION FOR OTHER CHARACTER.
C
C    CXS HOLDS LENGTH, INCLUDING ALLOWANCE FOR CSEP, BUT WITHOUT
C    ALLOWANCE FOR ANY TRAILING BLANKS.
C    CX IS ACTUAL LENGTH REQUIRED, AND INCLUDES INTER-CHARACTER
C    SPACE CSEP FOLLOWING LAST (BASE) CHARACTER
C    (I.E. CX/CXS INCLUDE LENGTH OF TRAILING BLANKS)
C**************************************************************
C
C
C
C+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      IF (FIT.AND.FITPT2.EQ.0) THEN
                 IF (CXX.GE.XFIT) THEN
                                 SPACE2 = SPACES
                                 XFIT2 = CXX
                                 FITPT2 = N
                 ELSE
                                 SPACE1 = SPACES
                                 XFIT1 = CXX
                                 FITPT1 = N
                 ENDIF
      ENDIF
C+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
C
C
C    AND PASS ACCUMULATED VERTICAL MINIMUM/MAXIMUM
C
      YFIT1 = YMIN(0)
      YFIT2 = YMAX(0)
C
      ASSIGN 35 TO GOFRAC
   34 NTH = NTHL
      NBET = IBETL
      NLOW = LOWL
      NALT = ALTL
      NMONSP = MONSPL
      NITAL = ITALL
      NUN = UNL
      NHVY = HVYL
C    RESTORE HEIGHT AND ANY OTHER DYNAMICALLY MODIFIABLE VALUES
      ICHECK = 0
      DO 31 I=1,MAXBET+2
      IF (CFONTL(I).EQ.CFONT(I)) GO TO 31
      FATPT2 = CFONT(I)
      CALL DFXM11(I,FATPT2,FATPT,INO)
      IF (FATPT.GE.0) GO TO 31
      II = 21
      IF (FATPT.EQ.-1) II = 20
      CALL DFX001('SYMTXT',II)
   31 CONTINUE
      ICHECK = ICCS
      GO TO GOFRAC,(35,2110)
   35 CONTINUE
  100 INTEND = INTNDS
      ICHECK = ICCSAV
      IDASH = IDASHS
C    RESTORE POSITION IN BROKEN LINE PATTERN
      XLDONE = XLDSAV
      N1BLP = N1SAV
      HT = HTIN
      WCTR = WCTRS
 9999 RETURN
10000 XPASS = 0.0
C    IN CASE LENGTH CALL
      GO TO 9999
 3001 C = 'SUPER'
      IC = 5
      GO TO 3003
 3002 C = 'SUB'
      IC = 3
 3003 IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,3004) C(1:IC),MAXLEV
 3004 FORMAT(1H0,'**DIMFILM WARNING** ATTEMPT TO NEST A ',A,'SCRIPT BEYO
     1ND LIMIT OF ',I2,' DEEP WAS IGNORED')
      GO TO 20000
 4001 C = 'SUPER'
      IC = 5
      GO TO 4003
 4002 C = 'SUB'
      IC = 3
 4003 IF (ICSAVE.GT.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4004) C(1:IC)
 4004 FORMAT(1H0,'**DIMFILM WARNING** ATTEMPT TO TERMINATE A ',A,'SCRIPT
     1 BELOW BASE LEVEL WAS IGNORED')
      GO TO 20000
 4005 IF (SEND) THEN
                     C = 'SUPER'
                     IC = 5
                ELSE
                     C = 'SUB'
                     IC = 3
      ENDIF
      IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4006) C(1:IC)
 4006 FORMAT(1H0,'**DIMFILM WARNING** UNBALANCED TERMINATING ',A,'SCRIPT
     1 IGNORED')
      GO TO 20000
 4007 C = ESC1
      IF (.NOT.ESC) C = ESC2
      IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4008) C(1:1),ISYM(N1-1:N1-1)
 4008 FORMAT(1H0,'**DIMFILM WARNING** UNRECOGNISED ESCAPE SEQUENCE - ',
     1 2A1,' IGNORED')
      GO TO 20000
 4010 IF (ICSAVE.LE.0) GO TO 997
      ICHECK = ICSAVE
      WRITE(ERRREC,4011) MAXFRC
 4011 FORMAT(1H0,'**DIMFILM WARNING** ATTEMPT TO INITIATE FRACTION BEYON
     1D MAXIMUM SUPPORTED (',I1,') ')
      END = .TRUE.
      GO TO 20010
 4012 CERR = 'DENOMINATOR MAY ONLY BE INITIATED FROM WITHIN NUMERATOR'
C    DIAGNOSTIC DONE DURING PASS PHASE FOR FRACTION
C    THEN SYMTXT EXECUTION ABORTED
 4016 IF (ICSAVE.LE.0) GO TO 997
      ICHECK = ICSAVE
      WRITE(ERRREC,4013) CERR,FRAC
 4013 FORMAT(1H0,'**DIMFILM WARNING** INCORRECT FRACTION SPECIFICATION I
     1GNORED - ',A/1H ,21X,'CURRENT FRACTION LEVEL - ',I1)
      END = .TRUE.
      GO TO 20010
 4014 CERR = 'FRACTION MAY ONLY BE TERMINATED FROM WITHIN DENOMINATOR'
      IF (FRAC.GT.0) GO TO 4016
      IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4015)
 4015 FORMAT(1H0,'**DIMFILM WARNING** ATTEMPT TO TERMINATE FRACTION WHEN
     1 NONE INITIATED (BASE LEVEL) IGNORED')
      GO TO 20000
 4020 N1 = I + 1
      IF (ICSAVE.LE.0) GO TO 15
      ICHECK = ICSAVE
      WRITE(ERRREC,4021) -NCHAR
 4021 FORMAT(1H0,'**DIMFILM WARNING**  DETECTED (AND IGNORED) INVALID CH
     1ARACTER, VALUE ',I3,' IN TEXT STRING')
      ASSIGN 15 TO RESGO
      GO TO 20010
 4022 N1 = I + 1
      IF (ICSAVE.LE.0) GO TO 15
      ICHECK = ICSAVE
      IF (MODIFY.GT.0) THEN
                            J = 5
                            CERR(1:J) = 'RIGHT'
                       ELSE
                            J = 4
                            CERR(1:J) = 'LEFT'
      ENDIF
      NCHAR2 = NCHAR - MODIFY
      MODIFY = 0
      WRITE(ERRREC,4023) NCHAR,CERR(1:J),NCHAR2
 4023 FORMAT(1H0,'**DIMFILM WARNING** DETECTED (AND IGNORED) INVALID CHA
     1RACTER, MAPPING TO VALUE ',I3,', AFTER ',A,' MODIFICATION F
     2ROM VALUE ',I3)
      ASSIGN 15 TO RESGO
      GO TO 20010
 4024 N1 = I + 1
C**   IF ((ICSAVE.LE.0).OR.(APASS)) GO TO RESGO,(1225,1425)
C**   SIEMENS FORTAN GIVES ERROR:
C**          "JZK112I-E .. SYMBOLIC NAME EXCEEDS 6 CHARACTERS"
C**   WHEN ASSIGNED GO TO FOLLOWS IF .. HENCE CRUDE WORKAROUND!
      IF ((ICSAVE.LE.0).OR.(APASS)) THEN
          GO TO RESGO,(1225,1425)
      ENDIF
C**
      ICHECK = ICSAVE
      WRITE(ERRREC,4025) ISYM(I:I)
 4025 FORMAT(1H0,'**DIMFILM WARNING** DETECTED (AND IGNORED) INVALID ACC
     1ENT, DENOTED BY ',A)
      GO TO 20010
 4026 I = N1 - 1
      IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4027) SM(IS),SM(IS)
 4027 FORMAT(1H0,'**DIMFILM WARNING** ENCOUNTERED INVALID NUMERIC FIELD
     1IN ',A,' ESCAPE SEQUENCE - ',A,' IGNORED')
      GO TO 20000
 4028 I = N1 - 1
      IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4029) SM(IS),NCHAR,SM(IS),ISNO
 4029 FORMAT(1H0,'**DIMFILM WARNING** ENCOUNTERED AND IGNORED OUT OF RAN
     1GE ', A,' (',I2,') IN ESCAPE SEQUENCE, ',A,' RANGE IS 1 TO ',I2)
      GO TO 20000
 4030 IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4031)
 4031 FORMAT(1H0,'**DIMFILM WARNING** DETECTED SYNTAX ERROR IN FONT LOAD
     1 ESCAPE SEQUENCE - WILL CONTINUE BEYOND FLAGGED FIELD')
      GO TO 20000
 4032 IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4033) I,MAXBET
 4033 FORMAT(1H0,'**DIMFILM WARNING** IGNORED ATTEMPT TO SELECT ALPHABET
     1 ',I1,' OUTSIDE IMPLEMENTED RANGE 1-',I1)
      GO TO 20000
 4050 IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,4051) ISYM(N1-2:N1-1)
 4051 FORMAT(1H0,'**DIMFILM WARNING** IGNORED ESCAPE SEQUENCE ',A,
     1   ' WHILE NOT IN BLOCK TEXT MODE')
      GO TO 20000
 5000 IF (ICSAVE.LE.0) GO TO 20
      ICHECK = ICSAVE
      WRITE(ERRREC,5001) ISYM(N1-2:N1-1)
 5001 FORMAT(1H0,'**DIMFILM WARNING** IGNORED ESCAPE SEQUENCE ',A,
     1   ' - NOT YET IMPLEMENTED')
      GO TO 20000
C    GENERAL SYMTXT DIAGNOSTIC TO PRINT STRING/BEGINNING OF STRING
C    AND PINPOINT ERROR
C    BASICALLY PRINTS EITHER UP TO 50 CHARACTERS FROM BEGINNING
C    OR CHARACTERS (J1:J2) DOT PATTERN (J3:J4)
C    IN THIS CASE DOES FIRST 25 CHARACTERS AND UP TO 21 CHARACTERS
C    SURROUNDING ERROR
20000 ASSIGN 20 TO RESGO
20010 NX = N1 - 1
C    REDUCE ERROR COUNT BY 1 BEFORE OUTPUT - AS CONTINUATION DIAGNOSTIC
      NUMWRN = NUMWRN - 1
*CALL,LINOUT0
      WRITE(ERRREC,20001) ROUTIN,NX,N
20001 FORMAT(1H0,21X,'TEXT STRING ERROR ORIGINATED IN USER REFERENCE TO
     1',A/1H0,21X,'ERROR DETECTED AT POSITION ',I4,'(/',I4,')')
      IF (NX.LE.45.OR.N.LE.50) THEN
                        J2 = MIN(50,N)
                        JX = NX
                        WRITE(ERRREC(3),20002) ISYM(1:J2)
20002 FORMAT(1H0,10X,'STRING - ',A)
                     ELSE
                         J4 = MIN(NX+10,N)
                         J3 = J4-21
                         JX = NX - (J3-1) + 25 + 9
C        (25 CHARACTER STRING + 9 SPACES/DOTS)
                         WRITE(ERRREC(3),20003) ISYM(1:25),ISYM(J3:J4)
20003 FORMAT(1H0,10X,'STRING - ',A,' . . . . ',A)
                     ENDIF
      J = MIN(JX-1,6)
      IF (J.LE.0) GO TO 20005
      DO 20004 I=1,J
C        (20 CHARACTER PREFACE TO STRING)
      ERRREC(4)(JX+20+I:JX+20+I) = '.'
20004 ERRREC(4)(JX+20-I:JX+20-I) = '.'
20005 ERRREC(4)(JX+20:JX+20) = 'I'
      ERRREC(4)(1:1) = ' '
      IF (END) WRITE(ERRREC(5),20006)
20006 FORMAT(1H0,21X,'****PROCESSING OF THIS TEXT STRING ABORTED****')
*CALL,LINOUT0
C    IF ABORT MUST RESET CX,CY TO BE SENSIBLE VALUES..
C    TEMPORARILY RESET CY ONLY
      IF (END) CY = 0.0
      ICHECK = ICCS
      IF (END) GO TO 997
      GO TO RESGO,(15,20,1225,1425)
      END
