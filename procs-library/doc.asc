DOC
ASCII
*NOSEQ
PLPROCS Procedures Documentation
================================

Introduction
------------

PLPROCS contains the source of procedures that simplify the use of
CDC NOS 2.8.7 for small scale software development and general usage.

Instead of a hierachy of directories, often containing very large
numbers of files, NOS offers *libraries* as a method of organising
program source, binaries and data.

The *program library* is the way source code, documentation and other
text documents are intended to be stored. These contain any number of
named *modules* or *decks*, with either traditional 6 bit characters,
or with the full 7 bit ASCII character set. Modules marked as *common
decks* can be "included" in other modules, and there is other
"pre-processor" functionality permitting conditional compilation or
inclusion. The tool used to create and maintain program libraries is
called $MODIFY$. This program also supplies source line editing and
source code control functionality, but these aspects are difficult to
use in a modern context without additional support programs.

The *library* is the way "binary code libraries" built from compiler
output *and* groups of executable programs can be organized. In
addition, *procedures* in Cyber Control Language can also be stored in
these libraries. One or more given libraries can be added to a *global
library set*. Any programs and procedures in libraries in the global
library set can be run by name (akin to putting the on "the path" in
today's mainstream systems). *Local library sets*, usually containing
"object code libraries" (REL modules in NOS terminology, as opposed
to the ABS modules of executable programs) can be used with the Cyber
Loader (linker) in a familiar way. These libraries are created and
maintained with the $LIBGEN$ and $LIBRARY$ tools.

Although very capable and efficient, using the $MODIFY$, $LIBGEN$,
$LIBRARY$ and related tools in a modern setting (particularly where
whole source code modules are edited at once in FSE and where
interactive work is dominant) can be made much more convenient with a
fairly small set of CCL procedures.

Most of this library is such a set of procedures.

+ $MODxxx$ procedures are for source code and text module maintenance
  using program libraries.
+ $LIBxxx$ procedures are for binary program and CCL procedure module
  libraries.
+ $TLBxxx$ procedures were intended to maintain text libraries, but
  these seem redundant and are probably a failed exeriment at this
  point.
+ $FTNSYS$ and $LINKPGM$ are simplified ways of compiling FTN5 programs
  and creating executable binaries.
+ $WPUT$ copies files to the local NOS web site and should be used for
  HTML files to be served up by Kevin Jordan's NOS web server.
+ $INSTALL$ puts binary executables into a *user library* maintained
  as a direct access file and inserted as a member of the global
  library set.
+ The other procedures provide a variety of convenient functionality.

To install this procedures library from a $RECLAIM$ tape ($VSN=PLPROC$)
on an empty machine, use the following commands:
    lt 13,0,1,r,tapes/plprocs.tap (in DtCyber operator window)
    RECLAIM,DB=0,Z./LIST.
    RECLAIM,DB=0,Z./LOAD,TN=PLPROC,PF=PLPROCS,FI=n.
    GET,PLPROCS.
    MODIFY,P=PLPROCS,C=BUILD,L=0,S=0,Z./*EDIT BUILD
    BEGIN,BUILD,BUILD.
    LIBRARY,USERLIB.
    ut 13,0,1 (in DtCyber operator window)

Note that the $n$, above, should be the highest $FI$ number shown in the
$RECLAIM$ $/LIST$ output, as this will be the latest version on the
tape.

Once the library is installed and in the global library set (as it will
be after the above), it can be rebuilt after changes using only:
    MODEXEC,BUILD,PLPROCS.

This documentation can be rebuilt and uploaded to the local web site
using:
    MODEXEC,BUILD,PLPROCS,ARG=DOC.

However, this requires the $DOCPROC$ and $PMDHTML$ programs which are
to be found in the $PLUTILS$ and $PLMDHTM$ program libraries. These
must be installed from $RECLAIM$ tapes and built using:
    lt 13,0,1,r,tapes/plutils.tap (in DtCyber operator window)
    RECLAIM,DB=0,Z./LIST.
    RECLAIM,DB=0,Z./LOAD,TN=PLUTIL,PF=PLUTILS,FI=n.
    MODEXEC,BUILD,PLUTILS.
    ut 13,0,1 (in DtCyber operator window)
    lt 13,0,1,r,tapes/plmdhtm.tap (in DtCyber operator window)
    RECLAIM,DB=0,Z./LIST.
    RECLAIM,DB=0,Z./LOAD,TN=PLMDHT,PF=PLMDHTM,FI=n.
    MODEXEC,BUILD,PLMDHTM.
    ut 13,0,1 (in DtCyber operator window)

This illustrates the overall plan for using these procedures for small
scale software development: "one project, one program library, one
$RECLAIM$ tape".

Procedure Usage
===============
